import pandas as pd
import os
from openpyxl import load_workbook
from datetime import datetime

# Ruta al escritorio
desktop = os.path.join(os.path.expanduser("~"), "Desktop")
folder_name = "BA Hig"  # Reemplazá con el nombre exacto de tu carpeta
folder_path = os.path.join(desktop, folder_name)

# Rutas de archivos
base_path = os.path.join(folder_path, "base.csv")
prueba_path = os.path.join(folder_path, "prueba.xlsx")

# Leer archivo base
df_base = pd.read_csv(base_path)

# Crear columnas nuevas
new_columns = list(df_base.columns) + ["Category", "Pend Date"]
df_empty = pd.DataFrame(columns=new_columns)

# Guardar encabezados en "prueba.xlsx"
df_empty.to_excel(prueba_path, index=False)

# Cargar workbook
book = load_workbook(prueba_path)
start_row = 1  # Para llevar control del punto donde pegar nuevas filas

with pd.ExcelWriter(prueba_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
    writer.book = book
    writer.sheets = {ws.title: ws for ws in book.worksheets}
    sheet = writer.sheets["Sheet1"]

    col_L = df_base.columns[11]  # Columna L
    col_J = df_base.columns[9]   # Columna J

    # --- Paso 1: L > 11 → High RTW ---
    df_high_rtw = df_base[df_base[col_L] > 11].copy()
    df_high_rtw["Category"] = "High RTW"
    df_high_rtw["Pend Date"] = ""
    df_high_rtw = df_high_rtw[new_columns]
    start_row = sheet.max_row
    df_high_rtw.to_excel(writer, index=False, header=False, startrow=start_row, sheet_name="Sheet1")

    # --- Paso 2: L > 60 → Case Age > 60 days ---
    df_case_age = df_base[df_base[col_L] > 60].copy()
    df_case_age["Category"] = "Case Age > 60 days"
    df_case_age["Pend Date"] = ""
    df_case_age = df_case_age[new_columns]
    start_row = sheet.max_row
    df_case_age.to_excel(writer, index=False, header=False, startrow=start_row, sheet_name="Sheet1")

    # --- Paso 3: Varios filtros por J ---
    filtros = {
        "OverallSLA": "OverallSLA WB",
        "GD_SystemErrors": "System Errors WB",
        "GD_SPECIAL_HANDLING_09": "Special Handling WB",
        "GD_SPECIAL_HANDLING_04": "Special Handling WB",
        "GD_Exceptions": "Exceptions WB",
        "GD_DISPUTE_PARKING": "Dispute Parking WB"
    }

    for valor, categoria in filtros.items():
        df_filtro = df_base[df_base[col_J] == valor].copy()
        if not df_filtro.empty:
            df_filtro["Category"] = categoria
            df_filtro["Pend Date"] = ""
            df_filtro = df_filtro[new_columns]
            start_row = sheet.max_row
            df_filtro.to_excel(writer, index=False, header=False, startrow=start_row, sheet_name="Sheet1")

    # --- Paso 4: J vacío → Null WB ---
    df_null = df_base[df_base[col_J].isna()].copy()
    if not df_null.empty:
        df_null["Category"] = "Null WB"
        df_null["Pend Date"] = ""
        df_null = df_null[new_columns]
        start_row = sheet.max_row
        df_null.to_excel(writer, index=False, header=False, startrow=start_row, sheet_name="Sheet1")

    # --- Paso 5: Domain Mismatch values ---
    domain_mismatch_vals = [
        "GD_CANADA", "GD_MULTICURRENCY", "GD_US_CST", "GD_UK", "GD_Brigthon_Approval_4"
    ]
    df_mismatch = df_base[df_base[col_J].isin(domain_mismatch_vals)].copy()
    if not df_mismatch.empty:
        df_mismatch["Category"] = "Domain Mismatch"
        df_mismatch["Pend Date"] = ""
        df_mismatch = df_mismatch[new_columns]
        start_row = sheet.max_row
        df_mismatch.to_excel(writer, index=False, header=False, startrow=start_row, sheet_name="Sheet1")

        # --- Paso 6: GD_SYSTEM_HOLD y L >= 3 ---
    df_hold = df_base[
        (df_base[col_J] == "GD_SYSTEM_HOLD") & (df_base[col_L] >= 3)
    ].copy()
    if not df_hold.empty:
        df_hold["Category"] = "System hold > 3 days"
        df_hold["Pend Date"] = ""
        df_hold = df_hold[new_columns]
        start_row = sheet.max_row
        df_hold.to_excel(writer, index=False, header=False, startrow=start_row, sheet_name="Sheet1")

    print("Valores únicos en columna I:", df_base[df_base.columns[8]].unique())
    print("Valores únicos en columna BE:", df_base[df_base.columns[56]].unique())


    # --- Paso 7: Status Mismatch ---
    col_I = df_base.columns[8]   # Columna I = index 8
    col_BE = df_base.columns[56] # Columna BE = index 56

    df_status_1 = df_base[
        (df_base[col_I] == "No") & (df_base[col_BE] == "Open")
    ].copy()

    df_status_2 = df_base[
        (df_base[col_I] == "Yes") & (df_base[col_BE] == "Pended")
    ].copy()

    df_status_mismatch = pd.concat([df_status_1, df_status_2])

    if not df_status_mismatch.empty:
        df_status_mismatch["Category"] = "Status Mismatch"
        df_status_mismatch["Pend Date"] = ""
        df_status_mismatch = df_status_mismatch[new_columns]
        start_row = sheet.max_row
        df_status_mismatch.to_excel(writer, index=False, header=False, startrow=start_row, sheet_name="Sheet1")

        
    col_fecha = df_base.columns[112]  # Columna 112
    col_J = df_base.columns[9]        # Columna J

    df_base[col_fecha] = pd.to_datetime(df_base[col_fecha], errors='coerce')
    hoy = pd.Timestamp(datetime.today().date())

    dias = (hoy - df_base[col_fecha]).dt.days
    df_pend_expired = df_base[
        (dias >= 0) & (dias <= 3) & (df_base[col_J] == "GD_Pend")
    ].copy()

    if not df_pend_expired.empty:
        df_pend_expired["Category"] = "Pend expired date"
        df_pend_expired["Pend Date"] = ""
        df_pend_expired = df_pend_expired[new_columns]
        start_row = sheet.max_row
        df_pend_expired.to_excel(writer, index=False, header=False, startrow=start_row, sheet_name="Sheet1")

    col_fecha = df_base.columns[98]   # Columna 98
    col_J = df_base.columns[9]        # Columna 9
    
    df_base[col_fecha] = pd.to_datetime(df_base[col_fecha], errors='coerce')
    hoy = pd.Timestamp(datetime.today().date())
    dias = (df_base[col_fecha] - hoy).dt.days
    
    df_pend_34 = df_base[
        (df_base[col_J] == "GD_Pend") & (dias > 34)
    ].copy()
    
    if not df_pend_34.empty:
        df_pend_34["Category"] = "Pend > 34"
        df_pend_34["Pend Date"] = (df_pend_34[col_fecha] - hoy).dt.days.astype(int)
        df_pend_34 = df_pend_34[new_columns]
        start_row = sheet.max_row
        df_pend_34.to_excel(writer, index=False, header=False, startrow=start_row, sheet_name="Sheet1")

    # Eliminar duplicados basados en la columna "Case ID"
    df_final = pd.read_excel(prueba_path)
    case_id_column = df_final.columns[10]  # columna número 11 (índice 10)
    
    original_count = len(df_final)
    df_final = df_final.drop_duplicates(subset=case_id_column, keep="first")
    new_count = len(df_final)
    removed_count = original_count - new_count
    
    df_final.to_excel(prueba_path, index=False)
    

print(f"File finished — {removed_count} duplicated case(s) removed.")

# --- Mensaje final ---
print("File finished")
